// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	dto "github.com/jackyrusly/jrgo/dto"
	mock "github.com/stretchr/testify/mock"

	models "github.com/jackyrusly/jrgo/models"
)

// IUserRepository is an autogenerated mock type for the IUserRepository type
type IUserRepository struct {
	mock.Mock
}

// RepositoryCreateUser provides a mock function with given fields: d
func (_m *IUserRepository) RepositoryCreateUser(d dto.RegisterRequestBody) error {
	ret := _m.Called(d)

	if len(ret) == 0 {
		panic("no return value specified for RepositoryCreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(dto.RegisterRequestBody) error); ok {
		r0 = rf(d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepositoryFindById provides a mock function with given fields: i
func (_m *IUserRepository) RepositoryFindById(i int64) models.User {
	ret := _m.Called(i)

	if len(ret) == 0 {
		panic("no return value specified for RepositoryFindById")
	}

	var r0 models.User
	if rf, ok := ret.Get(0).(func(int64) models.User); ok {
		r0 = rf(i)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	return r0
}

// RepositoryFindByUsername provides a mock function with given fields: Username
func (_m *IUserRepository) RepositoryFindByUsername(Username string) models.User {
	ret := _m.Called(Username)

	if len(ret) == 0 {
		panic("no return value specified for RepositoryFindByUsername")
	}

	var r0 models.User
	if rf, ok := ret.Get(0).(func(string) models.User); ok {
		r0 = rf(Username)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	return r0
}

// RepositoryFindByUsernameAndPassword provides a mock function with given fields: Username, Password
func (_m *IUserRepository) RepositoryFindByUsernameAndPassword(Username string, Password string) (models.User, error) {
	ret := _m.Called(Username, Password)

	if len(ret) == 0 {
		panic("no return value specified for RepositoryFindByUsernameAndPassword")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (models.User, error)); ok {
		return rf(Username, Password)
	}
	if rf, ok := ret.Get(0).(func(string, string) models.User); ok {
		r0 = rf(Username, Password)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(Username, Password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryUpdateUserName provides a mock function with given fields: ID, Name
func (_m *IUserRepository) RepositoryUpdateUserName(ID int64, Name string) error {
	ret := _m.Called(ID, Name)

	if len(ret) == 0 {
		panic("no return value specified for RepositoryUpdateUserName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, string) error); ok {
		r0 = rf(ID, Name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIUserRepository creates a new instance of IUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserRepository {
	mock := &IUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
