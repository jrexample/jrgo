// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	dto "github.com/jackyrusly/jrgo/dto"
	mock "github.com/stretchr/testify/mock"
)

// IAuthService is an autogenerated mock type for the IAuthService type
type IAuthService struct {
	mock.Mock
}

// ServiceGenerateToken provides a mock function with given fields: i
func (_m *IAuthService) ServiceGenerateToken(i int64) (*dto.TokenBody, error) {
	ret := _m.Called(i)

	if len(ret) == 0 {
		panic("no return value specified for ServiceGenerateToken")
	}

	var r0 *dto.TokenBody
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*dto.TokenBody, error)); ok {
		return rf(i)
	}
	if rf, ok := ret.Get(0).(func(int64) *dto.TokenBody); ok {
		r0 = rf(i)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TokenBody)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(i)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceLogin provides a mock function with given fields: d
func (_m *IAuthService) ServiceLogin(d dto.LoginRequestBody) (*dto.TokenBody, error) {
	ret := _m.Called(d)

	if len(ret) == 0 {
		panic("no return value specified for ServiceLogin")
	}

	var r0 *dto.TokenBody
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.LoginRequestBody) (*dto.TokenBody, error)); ok {
		return rf(d)
	}
	if rf, ok := ret.Get(0).(func(dto.LoginRequestBody) *dto.TokenBody); ok {
		r0 = rf(d)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TokenBody)
		}
	}

	if rf, ok := ret.Get(1).(func(dto.LoginRequestBody) error); ok {
		r1 = rf(d)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceRefreshToken provides a mock function with given fields: d
func (_m *IAuthService) ServiceRefreshToken(d dto.TokenBody) (*dto.TokenBody, error) {
	ret := _m.Called(d)

	if len(ret) == 0 {
		panic("no return value specified for ServiceRefreshToken")
	}

	var r0 *dto.TokenBody
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.TokenBody) (*dto.TokenBody, error)); ok {
		return rf(d)
	}
	if rf, ok := ret.Get(0).(func(dto.TokenBody) *dto.TokenBody); ok {
		r0 = rf(d)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TokenBody)
		}
	}

	if rf, ok := ret.Get(1).(func(dto.TokenBody) error); ok {
		r1 = rf(d)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceRegister provides a mock function with given fields: d
func (_m *IAuthService) ServiceRegister(d dto.RegisterRequestBody) error {
	ret := _m.Called(d)

	if len(ret) == 0 {
		panic("no return value specified for ServiceRegister")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(dto.RegisterRequestBody) error); ok {
		r0 = rf(d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIAuthService creates a new instance of IAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IAuthService {
	mock := &IAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
